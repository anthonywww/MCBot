package com.github.anthonywww.mcbot.world.block;

import static com.github.anthonywww.mcbot.world.block.BlockType.Flags.*;
import static com.github.anthonywww.mcbot.world.item.ItemGroup.*;
import com.github.anthonywww.mcbot.world.item.ItemGroup;

/**
 * Block registry
 */
public enum BlockType {

	UNDEFINED(-1, 0),
	
	AIR(0, 0, INDESTRUCTABLE),
	STONE(1, 0, PICKAXE),
	GRANITE(1, 1, PICKAXE),
	POLISHED_GRANITE(1, 2, PICKAXE),
	DIORITE(1, 3, PICKAXE),
	POLISHED_DIORITE(1, 4, PICKAXE),
	ANDESITE(1, 5, PICKAXE),
	POLISHED_ANDESITE(1, 6, PICKAXE),
	GRASS_BLOCK(2, 0, SHOVEL),
	DIRT(3, 0, SHOVEL),
	COARSE_DIRT(3, 1, SHOVEL),
	PODZOL(3, 2, SHOVEL),
	COBBLESTONE(4, 0, PICKAXE),
	OAK_PLANKS(5, 0, AXE),
	BIRCH_PLANKS(5, 1, AXE),
	JUNGLE_PLANKS(5, 3, AXE),
	ACACIA_PLANKS(5, 4, AXE),
	DARK_OAK_PLANKS(5, 5, AXE),
	OAK_SAPLING(6, 0, PLACEABLE | INTERACTABLE),
	SPRUCE_SAPLING(6, 1, PLACEABLE | INTERACTABLE),
	BIRCH_SAPLING(6, 2, PLACEABLE | INTERACTABLE),
	JUNGLE_SAPLING(6, 3, PLACEABLE | INTERACTABLE),
	ACACIA_SAPLING(6, 4, PLACEABLE | INTERACTABLE),
	DARK_OAK_SAPLING(6, 5, PLACEABLE | INTERACTABLE),
	BEDROCK(7, 0, SOLID | PLACEABLE | INDESTRUCTABLE), // Adminium, Bedrock
	FLOWING_WATER(8, 0, PLACEABLE | INDESTRUCTABLE),
	STILL_WATER(9, 0, PLACEABLE | INDESTRUCTABLE),
	FLOWING_LAVA(10, 0, PLACEABLE | INDESTRUCTABLE),
	STILL_LAVA(11, 0, PLACEABLE | INDESTRUCTABLE),
	SAND(12, 0, SHOVEL, SOLID | GRAVITY | PLACEABLE),
	RED_SAND(12, 1, SHOVEL, SOLID | PLACEABLE | GRAVITY),
	GRAVEL(13, 0, SHOVEL, SOLID | PLACEABLE | GRAVITY),
	GOLD_ORE(14, 0, PICKAXE),
	IRON_ORE(15, 0, PICKAXE),
	COAL_ORE(16, 0, PICKAXE),
	OAK_LOG(17, 0, AXE),
	SPRUCE_LOG(17, 1, AXE),
	BIRCH_LOG(17, 2, AXE),
	JUNGLE_LOG(17, 3, AXE),
	OAK_LEAVES(18, 0, SHEARS),
	SPRUCE_LEAVES(18, 1, SHEARS),
	BIRCH_LEAVES(18, 2, SHEARS),
	JUNGLE_LEAVES(18, 3, SHEARS),
	SPONGE(19, 0, SHEARS),
	WET_SPONGE(19, 1, SHEARS),
	GLASS(20, 0, SWORD),
	LAPIS_LAZULI_ORE(21, 0, PICKAXE),
	LAPIS_LAZULI(22, 0, PICKAXE),
	DISPENSER(23, 0, PICKAXE),
	SANDSTONE(24, 0, PICKAXE),
	CHISELED_SANDSTONE(24, 1, PICKAXE),
	CUT_SANDSTONE(24, 2, PICKAXE),
	NOTEBLOCK(25, 0, AXE),
	BED(26, 0, AXE),
	POWERED_RAIL(27, 0, PICKAXE),
	DETECTOR_RAIL(28, 0, PICKAXE),
	STICKY_PISTON(29, 0, PICKAXE),
	COBWEB(30, 0, SWORD),
	DEAD_SHRUB(31, 0, PLACEABLE),
	GRASS(31, 1, PLACEABLE),
	FERN(31, 2, PLACEABLE),
	DEAD_BUSH(32, 0, PLACEABLE),
	PISTON(33, 0, PICKAXE),
	PISTON_HEAD(34, 0, PICKAXE),
	WHITE_WOOL(35, 0, SHEARS),
	ORANGE_WOOL(35, 1, SHEARS),
	MAGENTA_WOOL(35, 2, SHEARS),
	LIGHT_BLUE_WOOL(35, 3, SHEARS),
	YELLOW_WOOL(35, 4, SHEARS),
	LIME_WOOL(35, 5, SHEARS),
	PINK_WOOL(35, 6, SHEARS),
	GRAY_WOOL(35, 7, SHEARS),
	LIGHT_GRAY_WOOL(35, 8, SHEARS),
	CYAN_WOOL(35, 9, SHEARS),
	PURPLE_WOOL(35, 10, SHEARS),
	BLUE_WOOL(35, 11, SHEARS),
	BROWN_WOOL(35, 12, SHEARS),
	GREEN_WOOL(35, 13, SHEARS),
	RED_WOOL(35, 14, SHEARS),
	BLACK_WOOL(35, 15, SHEARS),
	DANDELION(37, 0, PLACEABLE),
	POPPY(38, 0, PLACEABLE),
	BLUE_ORCHID(38, 1, PLACEABLE),
	ALLIUM(38, 2, PLACEABLE),
	AZURE_BLUET(38, 3, PLACEABLE),
	RED_TULIP(38, 4, PLACEABLE),
	ORANGE_TULIP(38, 5, PLACEABLE),
	WHITE_TULIP(38, 6, PLACEABLE),
	PINK_TULIP(38, 7, PLACEABLE),
	OXEYE_DAISY(38, 8, PLACEABLE),
	BROWN_MUSHROOM(39, 0, PLACEABLE),
	RED_MUSHROOM(40, 0, PLACEABLE),
	GOLD_BLOCK(41, 0, PICKAXE),
	IRON_BLOCK(42, 0, PICKAXE),
	DOUBLE_STONE_SLAB(43, 0, PICKAXE),
	DOUBLE_SANDSTONE_SLAB(43, 1, PICKAXE),
	DOUBLE_WOODEN_SLAB(43, 2, AXE),
	DOUBLE_COBBLESTONE_SLAB(43, 3, PICKAXE),
	DOUBLE_BRICK_SLAB(43, 4, PICKAXE),
	DOUBLE_STONE_BRICK_SLAB(43, 5, PICKAXE),
	DOUBLE_NETHER_BRICK_SLAB(43, 6, PICKAXE),
	DOUBLE_QUARTZ_SLAB(43, 7, PICKAXE),
	STONE_SLAB(44, 0, PICKAXE),
	SANDSTONE_SLAB(44, 1, PICKAXE),
	WOODEN_SLAB(44, 2, AXE),
	COBBLESTONE_SLAB(44, 3, PICKAXE),
	BRICK_SLAB(44, 4, PICKAXE),
	STONE_BRICK_SLAB(44, 5, PICKAXE),
	NETHER_BRICK_SLAB(44, 6, PICKAXE),
	QUARTZ_SLAB(44, 7, PICKAXE),
	BRICK_BLOCK(45, 0, PICKAXE),
	TNT(46, 0),
	BOOKSHELF(47, 0, AXE),
	MOSSY_COBBLESTONE(48, 0, PICKAXE),
	OBSIDIAN(49, 0, PICKAXE), // TODO: Diamond pickaxe only
	TORCH(50, 0),
	FIRE(51, 0, PLACEABLE),
	MOB_SPANWER(52, 0, PICKAXE), // TODO: Iron pickaxe and above only
	OAK_WOOD_STAIRS(53, 0, AXE),
	CHEST(54, 0, AXE, SOLID | PLACEABLE | INTERACTABLE),
	REDSTONE_WIRE(55, 0, PLACEABLE),
	DIAMOND_ORE(56, 0, PICKAXE), // TODO: Iron pickaxe and above only
	DIAMOND_BLOCK(57, 0, PICKAXE),
	CRAFTING_TABLE(58, 0, AXE, SOLID | PLACEABLE | INTERACTABLE),
	WHEAT_CROP(59, 0, PLACEABLE | INTERACTABLE),
	FARMLAND(60, 0, SHOVEL, SOLID | PLACEABLE | INTERACTABLE),
	FURNACE(61, 0, PICKAXE),
	LIT_FURNACE(62, 0, PICKAXE),
	STANDING_SIGN(63, 0, AXE, PLACEABLE | INTERACTABLE),
	OAK_WOOD_DOOR(64, 0, AXE),
	LADDER(65, 0, PLACEABLE),
	RAIL(66, 0, PICKAXE, PLACEABLE | INTERACTABLE),
	COBBLESTONE_STAIRS(67, 0, PICKAXE),
	WALL_SIGN(68, 0, AXE, PLACEABLE | INTERACTABLE),
	LEVER(69, 0, PLACEABLE | INTERACTABLE),
	STONE_PRESSURE_PLATE(70, 0, PICKAXE, PLACEABLE),
	IRON_DOOR(71, 0, PICKAXE, SOLID | PLACEABLE | WATER_LOGGABLE),
	WOODEN_PRESSURE_PLATE(72, 0, PLACEABLE),
	REDSTONE_ORE(73, 0, PICKAXE),
	LIT_REDSTONE_ORE(74, 0, PICKAXE),
	REDSTONE_TORCH(75, 0, PLACEABLE),
	LIT_REDSTONE_TORCH(76, 0, PLACEABLE),
	STONE_BUTTON(77, 0, PLACEABLE),
	SNOW(78, 0, SHOVEL, SOLID | PLACEABLE | INTERACTABLE),
	ICE(79, 0), // TODO: Needs silk touch to recover
	SNOW_BLOCK(80, 0, SHOVEL),
	CACTUS(81, 0), // TODO: Torches/entities cannot be placed on
	CLAY(82, 0, SHOVEL),
	SUGAR_CANE(83, 0, PLACEABLE | INTERACTABLE),
	JUKEBOX(84, 0, AXE, SOLID | PLACEABLE | INTERACTABLE),
	OAK_WOOD_FENCE(85, 0, AXE),
	PUMPKIN(86, 0, AXE),
	NETHERRACK(87, 0, PICKAXE),
	SOUL_SAND(88, 0, SHOVEL),
	GLOWSTONE(89, 0), // TODO: Prefer silk touch 
	PORTAL(90, 0, INDESTRUCTABLE),
	JACK_O_LANTERN(91, 0, AXE),
	CAKE(92, 0, SOLID | PLACEABLE | INTERACTABLE),
	REPEATER(93, 0, SOLID | PLACEABLE | INTERACTABLE),
	LIT_REPEATER(94, 0, SOLID | PLACEABLE | INTERACTABLE),
	WHITE_STAINED_GLASS(95, 0), // TODO: Needs silk touch to recover
	ORANGE_STAINED_GLASS(95, 1), // TODO: Needs silk touch to recover
	MAGENTA_STAINED_GLASS(95, 2), // TODO: Needs silk touch to recover
	LIGHT_BLUE_STAINED_GLASS(95, 3), // TODO: Needs silk touch to recover
	YELLOW_STAINED_GLASS(95, 4), // TODO: Needs silk touch to recover
	LIME_STAINED_GLASS(95, 5), // TODO: Needs silk touch to recover
	PINK_STAINED_GLASS(95, 6), // TODO: Needs silk touch to recover
	GRAY_STAINED_GLASS(95, 7), // TODO: Needs silk touch to recover
	LIGHT_GRAY_STAINED_GLASS(95, 8), // TODO: Needs silk touch to recover
	CYAN_STAINED_GLASS(95, 9), // TODO: Needs silk touch to recover
	PURPLE_STAINED_GLASS(95, 10), // TODO: Needs silk touch to recover
	BLUE_STAINED_GLASS(95, 11), // TODO: Needs silk touch to recover
	BROWN_STAINED_GLASS(95, 12), // TODO: Needs silk touch to recover
	GREEN_STAINED_GLASS(95, 13), // TODO: Needs silk touch to recover
	RED_STAINED_GLASS(95, 14), // TODO: Needs silk touch to recover
	BLACK_STAINED_GLASS(95, 15), // TODO: Needs silk touch to recover
	WOODEN_TRAPDOOR(96, 0), //TODO: FIX
	STONE_MONSTER_EGG(97, 0), //TODO FIX GOING FORWARD ABILITIES
	COBBLESTONE_MONSTER_EGG(97, 1),
	STONE_BRICK_MONSTER_EGG(97, 2),
	MOSSY_STONE_BRICK_MONSTER_EGG(97, 3),
	CRACKED_STONE_BRICK_MONSTER_EGG(97, 4),
	CHISELED_STONE_BRICK_MOSTER_EGG(97, 5),
	STONE_BRICKS(98, 0),
	MOSSY_STONE_BRICKS(98, 1),
	CRACKED_STONE_BRICKS(98, 2),
	CHISELED_STONE_BRICKS(98, 3),
	BROWN_MUSHROOM_BLOCK(99, 0),
	RED_MUSHROOM_BLOCK(100, 0),
	IRON_BARS(101, 0),
	GLASS_PANE(102, 0),
	MELON_BLOCK(103, 0),
	PUMPKIN_STEM(104, 0),
	MELON_STEM(105, 0),
	VINES(106, 0),
	OAK_FENCE_GATE(107, 0),
	BRICK_STAIRS(108, 0),
	STONE_BRICK_STAIRS(109, 0),
	MYCELLIUM(110, 0),
	LILY_PAD(111, 0),
	NETHER_BRICK(112, 0),
	NETHER_BRICK_FENCE(113, 0),
	NETHER_BRICK_STAIRS(114, 0),
	NETHER_WART(115, 0),
	ENCHANTMENT_TABLE(116, 0),
	BREWING_STAND(117, 0),
	CAULDRON(118, 0),
	END_PORTAL(119, 0),
	END_PORTAL_FRAME(120, 0),
	END_STONE(121, 0),
	DRAGON_EGG(122, 0),
	REDSTONE_LAMP(123, 0),
	LIT_REDSTONE_LAMP(124, 0),
	DOUBLE_OAK_WOOD_SLAB(125, 0),
	DOUBLE_SPRUCE_WOOD_SLAB(125, 1),
	DOUBLE_BIRCH_WOOD_SLAB(125, 2),
	DOUBLE_JUNGLE_WOOD_SLAB(125, 3),
	DOUBLE_ACACIA_WOOD_SLAB(125, 4),
	DOUBLE_DARK_OAK_WOOD_SLAB(125, 5),
	OAK_WOOD_SLAB(126, 0),
	SPRUCE_WOOD_SLAB(126, 1),
	BIRCH_WOOD_SLAB(126, 2),
	JUNGLE_WOOD_SLAB(126, 3),
	ACACIA_WOOD_SLAB(126, 4),
	DARK_OAK_WOOD_SLAB(126, 5),
	COCOA(127, 0),
	SANDSTONE_STAIRS(128, 0),
	EMERALD_ORE(129, 0),
	ENDER_CHEST(130, 0),
	TRIPWIRE_HOOK(131, 0),
	TRIPWIRE(132, 0),
	EMERALD_BLOCK(133, 0),
	SPRUCE_WOOD_STAIRS(134, 0),
	BIRCH_WOOD_STAIRS(135, 0),
	JUNGLE_WOOD_STAIRS(136, 0),
	COMMAND_BLOCK(137, 0),
	BEACON(138, 0),
	COBBLESTONE_WALL(139, 0),
	MOSSY_COBBLESTONE_WALL(139, 1),
	FLOWER_POT(140, 0),
	CARROTS(141, 0),
	POTATOES(142, 0),
	WOODEN_BUTTON(143, 0),
	MOB_HEAD(144, 0),
	ANVIL(145, 0),
	TRAPPED_CHEST(146, 0),
	LIGHT_WEIGHTED_PRESSURE_PLATE(147, 0),
	HEAVY_WEIGHTED_PRESSURE_PLATE(148, 0),
	UNPOWERED_COMPARATOR(149, 0),
	POWERED_COMPARATOR(150, 0),
	DAYLIGHT_SENSOR(151, 0),
	REDSTONE_BLOCK(152, 0),
	NETHER_QUARTZ_ORE(153, 0),
	HOPPER(154, 0),
	QUARTZ_BLOCK(155, 0),
	CHISELED_QUARTZ_BLOCK(155, 1),
	PILLAR_QUARTZ_BLOCK(155, 2),
	QUARTZ_STAIRS(156, 0),
	ACTIVATOR_RAIL(157, 0),
	DROPPER(158, 0),
	WHITE_HARDENED_CLAY(159, 0),
	ORANGE_HARDENED_CLAY(159, 1),
	MAGENTA_HARDENED_CLAY(159, 2),
	LIGHT_BLUE_HARDENED_CLAY(159, 3),
	YELLOW_HARDENED_CLAY(159, 4),
	LIME_HARDENED_CLAY(159, 5),
	PINK_HARDENED_CLAY(159, 6),
	GRAY_HARDENED_CLAY(159, 7),
	LIGHT_GREY_HARDENED_CLAY(159, 8),
	CYAN_HARDENED_CLAY(159, 9),
	PURPLE_HARDENED_CLAY(159, 10),
	BLUE_HARDENED_CLAY(159, 11),
	BROWN_HARDENED_CLAY(159, 12),
	GREEN_HARDENED_CLAY(159, 13),
	RED_HARDENED_CLAY(159, 14),
	BLACK_HARDENED_CLAY(159, 15),
	WHITE_STAINED_GLASS_PANE(160, 0),
	ORANGE_STAINED_GLASS_PANE(160, 1),
	MAGENTA_STAINED_GLASS_PANE(160, 2),
	LIGHT_BLUE_STAINED_GLASS_PANE(160, 3),
	YELLOW_STAINED_GLASS_PANE(160, 4),
	LIME_STAINED_GLASS_PANE(160, 5),
	PINK_STAINED_GLASS_PANE(160, 6),
	GRAY_STAINED_GLASS_PANE(160, 7),
	LIGHT_GRAY_STAINED_GLASS_PANE(160, 8),
	CYAN_STAINED_GLASS_PANE(160, 9),
	PURPLE_STAINED_GLASS_PANE(160, 10),
	BLUE_STAINED_GLASS_PANE(160, 11),
	BROWN_STAINED_GLASS_PANE(160, 12),
	GREEN_STAINED_GLASS_PANE(160, 13),
	RED_STAINED_GLASS_PANE(160, 14),
	BLACK_STAINED_GLASS_PANE(160, 15),
	ACACIA_LEAVES(161, 0),
	DARK_OAK_LEAVES(161, 1),
	ACACIA_WOOD(162, 0),
	DARK_OAK_WOOD(162, 1),
	ACACIA_WOOD_STAIRS(163, 0),
	DARK_OAK_WOOD_STAIRS(164, 0),
	SLIME_BLOCK(165, 0),
	BARRIER(166, 0),
	IRON_TRAPDOOR(167, 0),
	PRISMARINE(168, 0),
	PRISMARINE_BRICKS(168, 1),
	DARK_PRISMARINE(168, 2),
	SEA_LANTERN(169, 0),
	HAY_BALE(170, 0),
	WHITE_CARPET(171, 0),
	ORANGE_CARPET(171, 1),
	MAGENTA_CARPET(171, 2),
	LIGHT_BLUE_CARPET(171, 3),
	YELLOW_CARPET(171, 4),
	LIME_CARPET(171, 5),
	PINK_CARPET(171, 6),
	GRAY_CARPET(171, 7),
	LIGHT_GRAY_CARPET(171, 8),
	CYAN_CARPET(171, 9),
	PURPLE_CARPET(171, 10),
	BLUE_CARPET(171, 11),
	BROWN_CARPET(171, 12),
	GREEN_CARPET(171, 13),
	RED_CARPET(171, 14),
	BLACK_CARPET(171, 15),
	HARDENED_CLAY(172, 0),
	BLOCK_OF_COAL(173, 0),
	PACKED_ICE(174, 0),
	SUNFLOWER(175, 0),
	LILAC(175, 1),
	DOUBLE_TALLGRASS(175, 2),
	LARGE_FERN(175, 3),
	ROSE_BUSH(175, 5),
	PEONY(175, 5),
	STANDING_BANNER(176, 0),
	WALL_BANNER(177, 0),
	INVERTED_DAYLIGHT_SENSOR(178, 0),
	RED_SANDSTONE(179, 0),
	CHISELED_RED_SANDSTONE(179, 1),
	SMOOTH_RED_SANDSTONE(179, 2),
	RED_SANDSTONE_STAIRS(180, 0),
	DOUBLE_RED_SANDSTONE_SLAB(181, 0),
	RED_SANDSTONE_SLAB(182, 0),
	SPRUCE_FENCE_GATE(183, 0),
	BIRCH_FENCE_GATE(184, 0),
	JUNGLE_FENCE_GATE(185, 0),
	DARK_OAK_FENCE_GATE(186, 0),
	ACACIA_FENCE_GATE(187, 0),
	SPRUCE_FENCE(188, 0),
	BIRCH_FENCE(189, 0),
	JUNGLE_FENCE(190, 0),
	DARK_OAK_FENCE(191, 0),
	ACACIA_FENCE(192, 0),
	SPRUCE_DOOR_BLOCK(193, 0),
	BIRCH_DOOR_BLOCK(194, 0),
	JUNGLE_DOOR_BLOCK(195, 0),
	ACACIA_DOOR_BLOCK(196, 0),
	DARK_OAK_DOOR_BLOCK(197, 0),
	END_ROD(198, 0),
	CHORUS_PLANT(199, 0),
	CHORUS_FLOWER(200, 0),
	PURPUR_BLOCK(201, 0),
	PURPUR_PILLAR(202, 0),
	PURPUR_STAIRS(203, 0),
	PURPUR_DOUBLE_SLAB(204, 0),
	PURPUR_SLAB(205, 0),
	END_STONE_BRICKS(206, 0),
	BEETROOT_BLOCK(207, 0),
	GRASS_PATH(208, 0),
	END_GATEWAY(209, 0),
	REPEATING_COMMAND_BLOCK(210, 0),
	CHAIN_COMMAND_BLOCK(211, 0),
	FROSTED_ICE(212, 0),
	MAGMA_BLOCK(213, 0),
	NETHER_WART_BLOCK(214, 0),
	RED_NETHER_BRICK(215, 0),
	BONE_BLOCK(216, 0),
	STRUCTURE_VOID(217, 0),
	OBSERVER(218, 0),
	WHITE_SHULKER_BOX(219, 0),
	ORANGE_SHULKER_BOX(220, 0),
	MAGENTA_SHULKER_BOX(221, 0),
	LIGHT_BLUE_SHULKER_BOX(222, 0),
	YELLOW_SHULKER_BOX(223, 0),
	LIME_SHULKER_BOX(224, 0),
	PINK_SHULKER_BOX(225, 0),
	GRAY_SHULKER_BOX(226, 0),
	LIGHT_GRAY_SHULKER_BOX(227, 0),
	CYAN_SHULKER_BOX(228, 0),
	PURPLE_SHULKER_BOX(229, 0),
	BLUE_SHULKER_BOX(230, 0),
	BROWN_SHULKER_BOX(231, 0),
	GREEN_SHULKER_BOX(232, 0),
	RED_SHULKER_BOX(233, 0),
	BLACK_SHULKER_BOX(234, 0),
	WHITE_GLAZED_TERRACOTTA(235, 0),
	ORANGE_GLAZED_TERRACOTTA(236, 0),
	MAGENTA_GLAZED_TERRACOTTA(237, 0),
	LIGHT_BLUE_GLAZED_TERRACOTTA(238, 0),
	YELLOW_GLAZED_TERRACOTTA(239, 0),
	LIME_GLAZED_TERRACOTTA(240, 0),
	PINK_GLAZED_TERRACOTTA(241, 0),
	GRAY_GLAZED_TERRACOTTA(242, 0),
	LIGHT_GRAY_GLAZED_TERRACOTTA(243, 0),
	CYAN_GLAZED_TERRACOTTA(244, 0),
	PURPLE_GLAZED_TERRACOTTA(245, 0),
	BLUE_GLAZED_TERRACOTTA(246, 0),
	BROWN_GLAZED_TERRACOTTA(247, 0),
	GREEN_GLAZED_TERRACOTTA(248, 0),
	RED_GLAZED_TERRACOTTA(249, 0),
	BLACK_GLAZED_TERRACOTTA(250, 0),
	WHITE_CONCRETE(251, 0),
	ORANGE_CONCRETE(251, 1),
	MAGENTA_CONCRETE(251, 2),
	LIGHT_BLUE_CONCRETE(251, 3),
	YELLOW_CONCRETE(251, 4),
	LIME_CONCRETE(251, 5),
	PINK_CONCRETE(251, 6),
	GRAY_CONCRETE(251, 7),
	LIGHT_GRAY_CONCRETE(251, 8),
	CYAN_CONCRETE(251, 9),
	PURPLE_CONCRETE(251, 10),
	BLUE_CONCRETE(251, 11),
	BROWN_CONCRETE(251, 12),
	GREEN_CONCRETE(251, 13),
	RED_CONCRETE(251, 14),
	BLACK_CONCRETE(251, 15),
	WHITE_CONCRETE_POWDER(252, 0),
	ORANGE_CONCRETE_POWDER(252, 1),
	MAGENTA_CONCRETE_POWDER(252, 2),
	LIGHT_BLUE_CONCRETE_POWDER(252, 3),
	YELLOW_CONCRETE_POWDER(252, 4),
	LIME_CONCRETE_POWDER(252, 5),
	PINK_CONCRETE_POWDER(252, 6),
	GRAY_CONCRETE_POWDER(252, 7),
	LIGHT_GRAY_CONCRETE_POWDER(252, 8),
	CYAN_CONCRETE_POWDER(252, 9),
	PURPLE_CONCRETE_POWDER(252, 10),
	BLUE_CONCRETE_POWDER(252, 11),
	BROWN_CONCRETE_POWDER(252, 12),
	GREEN_CONCRETE_POWDER(252, 13),
	RED_CONCRETE_POWDER(252, 14),
	BLACK_CONCRETE_POWDER(252, 15),
	STRUCTURE_BLOCK(255, 0, SOLID | PLACEABLE | INDESTRUCTABLE | INTERACTABLE);
	
	private final int id;
	private final int metadata;
	private final int maxStack;
	private final int flags;
	private final ItemGroup toolType;

//	private BlockType(int id) {
//		this(id, 0);
//	}
	
	private BlockType(int id, int metadata) {
		this(id, metadata, SOLID | PLACEABLE);
	}
	
	private BlockType(int id, int metadata, int flags) {
		this(id, metadata, 64, flags, null);
	}
	
	private BlockType(int id, ItemGroup toolType) {
		this(id, toolType, SOLID | PLACEABLE);
	}
	
	private BlockType(int id, ItemGroup toolType, int flags) {
		this(id, 0, 64, flags, toolType);
	}
	
	private BlockType(int id, int metadata, ItemGroup toolType) {
		this(id, metadata, 64, SOLID | PLACEABLE, toolType);
	}
	
	private BlockType(int id, int metadata, ItemGroup toolType, int flags) {
		this(id, metadata, 64, flags, toolType);
	}
	
	private BlockType(int id, int metadata, int maxStack, int flags, ItemGroup toolType) {
		this.id = id;
		this.metadata = metadata;
		this.flags = flags;
		this.maxStack = maxStack;
		this.toolType = toolType;
	}

	public int getId() {
		return id;
	}
	
	public int getMetadata() {
		return metadata;
	}
	
	public String getName() {
		return this.name().toLowerCase();
	}

	public int getMaxStackSize() {
		return maxStack;
	}

	public boolean isSolid() {
		return (flags & Flags.SOLID) == Flags.SOLID;
	}

	public boolean isInteractable() {
		return (flags & Flags.INTERACTABLE) == Flags.INTERACTABLE;
	}

	public boolean isPlaceable() {
		return (flags & Flags.PLACEABLE) == Flags.PLACEABLE;
	}

	public boolean isIndestructable() {
		return (flags & Flags.INDESTRUCTABLE) == Flags.INDESTRUCTABLE;
	}
	
	public boolean isWaterLoggable() {
		return (flags & Flags.WATER_LOGGABLE) == Flags.WATER_LOGGABLE;
	}

	public boolean hasGravity() {
		return (flags & Flags.GRAVITY) == Flags.GRAVITY;
	}
	
	public ItemGroup getToolType() {
		return toolType;
	}

	public static BlockType getById(int id) {
		for (BlockType type : values()) {
			if (type.getId() == id) {
				return type;
			}
		}
		return UNDEFINED;
	}
	
	public static BlockType getByName(String name) {
		for (BlockType type : values()) {
			if (type.getName().equalsIgnoreCase(name)) {
				return type;
			}
		}
		return UNDEFINED;
	}


	protected static final class Flags {
		public static final int SOLID = 1, INTERACTABLE = 2, PLACEABLE = 4, INDESTRUCTABLE = 8, WATER_LOGGABLE = 16, GRAVITY = 32;
	}

}
